<?php
/**
 * @file
 * File description
 *
 * Long description
 */

// Helpers.
include_once("stanford_access_control.inc");

/**
 * Implements hook_permission().
 */
function stanford_access_control_permission() {
  return array(
    'bypass stanford access protection' => array(
      'title' => t('Bypass Stanford Access protection'),
      'description' => t('Bypass the access restrictions.'),
    ),
    'administer stanford access control' => array(
      'title' => t('Administer Stanford Access Control module.'),
      'description' => t('Access configuration screen.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function stanford_access_control_menu() {
  $items = array();

  $items['admin/config/stanford/access-control'] = array(
    'title' => 'Stanford Access Control',
    'description' => 'Configure protected pages setting.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_access_control_configure'),
    'access arguments' => array('administer stanford access control'),
    'file' => 'stanford_access_control.admin.inc',
  );

  $items['admin/config/stanford/access-control/list'] = array(
    'title' => 'Protected Pages',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/stanford/access-control/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_access_control_settings'),
    'access arguments' => array('administer stanford access control'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_access_control.admin.inc',
  );

  $items['admin/config/stanford/access-control/new'] = array(
    'title' => 'Create new protected path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_access_control_create_new_rule_form'),
    'access arguments' => array('administer stanford access control'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'stanford_access_control.admin.inc',
  );

  $items['admin/config/stanford/access-control/%/edit'] = array(
    'title' => 'Edit Protected Pages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_access_control_edit_rule_form', 4),
    'access arguments' => array('administer stanford access control'),
    'file' => 'stanford_access_control.admin.inc',
  );

  $items['admin/config/stanford/access-control/%/delete'] = array(
    'title' => 'Delete Protected Pages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_access_control_delete_confirm', 4),
    'access arguments' => array('administer stanford access control'),
    'type' => MENU_CALLBACK,
    'file' => 'stanford_access_control.admin.inc',
  );

  return $items;
}

/**
 * ********************** PATH ACCESS ******************************************
 */

/**
 * Implements hook_init().
 */
function stanford_access_control_init() {

  // Always let go if the user has the bypass.
  if (user_access('bypass stanford access protection')) {
    return;
  }

  // If the page is a node let the node_access hook handle things.
  $a0 = arg(0);
  $a1 = arg(1);
  if ($a0 == "node" && is_numeric($a1)) {
    return;
  }

  // For all other things including other entity types.
  $current_path = current_path();
  $access = stanford_access_control_check_user_access($current_path);

  if (!$access) {
    stanford_access_control_deny_access();
  }

}

/**
 * ********************** END PATH ACCESS **************************************
 */

/**
 * ********************** NODE ACCESS ******************************************
 */

/**
 * Implements hook_node_access().
 */
function stanford_access_control_node_access($node, $op, $account) {

  // Only run on view op.
  if ($op !== "view") {
    return NODE_ACCESS_IGNORE;
  }

  // Nothing to do when the passed in param is not an object.
  if (!is_object($node) || !isset($node->nid)) {
    return NODE_ACCESS_IGNORE;
  }

  // Always let go if the user has the bypass.
  if (user_access('bypass stanford access protection')) {
    return NODE_ACCESS_IGNORE;
  }

  // Store both path options.
  $path = "node/" . $node->nid;
  $access = stanford_access_control_check_user_access($path, $account);

  // If we get a PID then we have a valid entry against this path.
  if (!$access) {
    return NODE_ACCESS_DENY;
  }

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_grants().
 */
function stanford_access_control_node_grants($account, $op) {
  $grants = array();
  if ($op == "view") {
    $grants["stanford_access_control"] = array($account->uid);
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function stanford_access_control_node_access_records($node) {

  $grants = array();
  $path = "node/" . $node->nid;
  $record = array(
    'nid' => $node->nid,
    'gid' => 0,
    'realm' => 'all',
    'priority' => 1,
    'grant_view' => 1,
    'grant_update' => 0,
    'grant_delete' => 0,
  );

  $users = entity_load('user');

  foreach ($users as $account) {
    // If in the locked paths. Add a grant.
    $access = stanford_access_control_check_user_access($path, $account);

    if (!$access) {
      continue;
    }

    $record['gid'] = $account->uid;
    $record['realm'] = "stanford_access_control";
    $grants[] = $record;
  }

  return $grants;
}

/**
 * ********************** END NODE ACCESS **************************************
 */

/**
 * ************************ BEAN ACCESS ****************************************
 */

/**
 * Implements hook_bean_access().
 *
 * Access callback for beans
 *
 * @param $bean
 *  Tthe fully loaded bean object
 * @param $bean
 *  The access type of view, edit, delete, create
 * @param $account
 *  The user account
 *
 * @return boolean
 *  True if access is allowed, FALSE if not.
 */
function stanford_access_control_bean_access($bean, $op, $account) {

  // Don't futz with other ops.
  if ($op !== "view") {
    return TRUE;
  }

  $normal_path = drupal_get_normal_path($bean->url());
  return stanford_access_control_check_user_access($normal_path, $account);

}

/**
 * *********************** END BEAN ACCESS *************************************
 */

/**
 * Checks wether or not a user has access to a path.
 *
 * Checks the current user and path (if not provided) for access against all
 * of the configured access path rules.
 *
 * @param string $path
 *   The path to check.
 * @param object $user
 *   The user account to check on.
 *
 * @return boolean
 *   True for access. False for denied.
 */
function stanford_access_control_check_user_access($path = NUll, $user = NULL) {
  $access = FALSE;

  // Default to current path if not passed in explicitly.
  if (!$path) {
    $path = current_path();
  }

  // Do the normal parsing of the path.
  $normal_path = drupal_get_normal_path($path);
  $alias = "";
  if (module_exists("path")) {
    $alias = drupal_get_path_alias($normal_path);
  }

  // If no user passed in get the current user from global.
  if (!$user) {
    global $user;
  }

  // If bypass access always go to true.
  if (user_access('bypass stanford access protection', $user)) {
    return TRUE;
  }

  // Get all the pids that match the path we are on.
  $pids = stanford_access_control_get_pids_by_path($normal_path, $alias);

  // If no pids then we can assume access.
  if (!$pids) {
    return TRUE;
  }

  // Foreach of the options found check the users access against it.
  foreach ($pids as $pid => $values) {

    // If the rule is not enabled then skip.
    if (!$values->enabled) {
      continue;
    }

    // Get the allowed users and roles.
    $roles = $values->roles;
    $users = $values->users;

    // Check if the user has specific access.
    if (in_array($user->uid, $users)) {
      $access = TRUE;
      break;
    }

    // Check if any of the roles match.
    if (is_array($roles)) {
      $intersect = array_intersect($user->roles, array_values($roles));
      if ($intersect) {
        $access = TRUE;
      }
    }
  }

  return $access;
}


/**
 * ********************* MENU ITEMS ********************************************
 */

/**
 * Implements hook_menu_alter().
 */
function stanford_access_control_menu_alter(&$items) {
  // Allow everything to be altered!!!!
  foreach ($items as $path => &$item) {
    if (isset($item["access callback"]) && $item["access callback"] === "views_access") {
      $item["options"]['alter'] = TRUE;
    }
    // Why both? Ask the core guys. I swear they put these things in here to keep me employed.
    if (isset($item["access_callback"]) && $item["access_callback"] === "views_access") {
      $item["options"]['alter'] = TRUE;
    }
  }
}

/**
 * Implements hook_menu_link_alter().
 */
function stanford_access_control_menu_link_alter(&$item) {
  // Allow everything to be altered!!!!
  if (isset($item["access callback"]) && $item["access callback"] === "views_access") {
    $item["options"]['alter'] = TRUE;
  }
  // Why both? Ask the core guys. I swear they put these things in here to keep me employed.
  if (isset($item["access_callback"]) && $item["access_callback"] === "views_access") {
    $item["options"]['alter'] = TRUE;
  }
}

/**
 * Hide menu links if user does not have access to them.
 * @return [type] [description]
 */
function stanford_access_control_translated_menu_link_alter(&$link, $map) {

  // We are not here to grant. Only taketh awayeth.
  if ($link["access"] === FALSE || user_access('bypass stanford access protection')) {
    return FALSE;
  }

  // Check the access.
  $access = stanford_access_control_check_user_access($link["link_path"]);

  if (!$access) {
    $link["access"] = FALSE;
  }

}

/**
 * Alter the menu block tree to hide items that the user has no access to.
 */
function stanford_access_control_menu_block_tree_alter(&$tree) {
  // Menu block seems to miss a vital call to the access checks.
  // Lets do that.
  foreach ($tree as $k => $item) {
    $item["link"] = stanford_access_control_menu_block_tree_alter_do_access_check($item["link"]);
    if (isset($item["below"]) && !empty($item["below"])) {
      $item["below"] = stanford_access_control_menu_block_tree_alter($item["below"]);
    }
    $tree[$k] = $item;
  }
  return $tree;
}

/**
 * Run an access check against a menu item.
 *
 * This function will alter the menu item to deny access. It will never grant
 * access to a path.
 *
 * @param array $item
 *   A menu item.
 *
 * @return array
 *   The modified $item that was passed in.
 */
function stanford_access_control_menu_block_tree_alter_do_access_check($item) {

  $path = drupal_get_normal_path($item["link_path"]);

  $access = stanford_access_control_check_user_access($path);

  if (!$access) {
    $item["access"] = FALSE;
  }

  return $item;
}

/**
 * ********************* END MENU ITEMS ****************************************
 */

/**
 * ********************* PAGE MESSAGES *****************************************
 */

/**
 * Implements hook_preprocess_page().
 */
function stanford_access_control_preprocess_page(&$vars) {

  // Check the setting to see if this was disabled.
  $on = variable_get("stanford_access_control_messages", TRUE);
  if (!$on) {
    return;
  }

  $normal_path = drupal_get_normal_path(current_path());
  $pids = stanford_access_control_get_pids_by_path($normal_path);
  $message = "This page is protected by the !title protection rule and permits the following to view: @allowed";

  // Nothing to do with no results.
  if (!is_array($pids)) {
    return;
  }

  foreach ($pids as $pid => $obj) {

    $link_to_rule = l(
      check_plain($obj->title),
      "admin/config/stanford/access-control/" . $pid . "/edit"
    );

    $allowed = "";
    if (is_array($obj->roles)) {
      $obj->roles = array_filter($obj->roles);
      $pop = 0;

      if (count($obj->roles) >= 2) {
        $pop = array_pop($obj->roles);
      }

      $allowed = implode(", ", $obj->roles);

      if (!empty($pop)) {
        $allowed .= t(", and ") . $pop;
      }

      // For John.
      $allowed .= ".";

    }

    if (is_array($obj->users) && !empty($obj->users)) {
      $allowed .= " " . t("and") . " " . implode(", ", $obj->users);
    }

    drupal_set_message(
      t(
        $message,
        array(
          "!title" => $link_to_rule,
          "@allowed" => $allowed
        )
      ),
      "stanford-access-control"
    );

  }
}
